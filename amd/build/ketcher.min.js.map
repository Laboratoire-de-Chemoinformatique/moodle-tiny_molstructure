{"version":3,"file":"ketcher.min.js","sources":["../src/ketcher.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\nimport Selectors from \"tiny_molstructure/selectors\";\nimport config from 'core/config'\nimport {get_string as getString} from 'core/str';\nimport {component} from 'tiny_molstructure/common';\nimport notification from \"core/notification\";\nimport Ajax from 'core/ajax';\nimport {getDraftItemId} from 'editor_tiny/options';\n\n/**\n * @module     tiny_molstructure/ketcher\n * Visual Mathquill editor input instanciation\n */\n\nexport const insertImage = async(iframeBody, editor) => {\n  let divContent = '';\n  // Getting the viewer canvas.\n  let ketcherViewer = iframeBody.contentDocument.querySelector(Selectors.elements.canvas.ketcherviewId);\n  const imgDataURL = ketcherViewer.toDataURL('image/svg');\n  const itemId = getDraftItemId(editor);\n  const fileReturn = await createAnUploadImageFile(itemId, imgDataURL);\n  // To retrieve image.\n  divContent = \"<img src=\\\"\" + fileReturn.fileUrl + \"\\\" alt=\\\"ChemDoodle PNG\\\"/>\";\n  editor.insertContent(divContent);\n};\n\nexport const createAnUploadImageFile = async (itemId, imageDataUrl) => {\n  const generatedImageResult = await new Promise( resolve => {\n    return Ajax.call([{\n      methodname: 'tiny_molstructure_generate_store_image',\n      args: {\n        'itemId': itemId,\n        'imageDataUrl': imageDataUrl\n      },\n      done : result => {\n        resolve(result);\n      },\n      fail: notification.exception || failCallback('Error while generated image.')\n    }]);\n  });\n  return generatedImageResult;\n};\n\nfunction base64ToBlob(base64String, contentType = '') {\n  const byteCharacters = atob(base64String);\n  const byteArrays = [];\n\n  for (let i = 0; i < byteCharacters.length; i++) {\n    byteArrays.push(byteCharacters.charCodeAt(i));\n  }\n\n  const byteArray = new Uint8Array(byteArrays);\n  return new Blob([byteArray], { type: contentType });\n}"],"names":["async","iframeBody","editor","divContent","imgDataURL","contentDocument","querySelector","Selectors","elements","canvas","ketcherviewId","toDataURL","itemId","createAnUploadImageFile","fileUrl","insertContent","imageDataUrl","Promise","resolve","Ajax","call","methodname","args","done","result","fail","notification","exception","failCallback"],"mappings":"kpBA2B2BA,MAAMC,WAAYC,cACvCC,WAAa,SAGXC,WADcH,WAAWI,gBAAgBC,cAAcC,mBAAUC,SAASC,OAAOC,eACtDC,UAAU,aACrCC,QAAS,2BAAeV,QAG9BC,WAAa,oBAFYU,wBAAwBD,OAAQR,aAEjBU,QAAU,2BAClDZ,OAAOa,cAAcZ,mBAGVU,wBAA0Bb,MAAOY,OAAQI,qBACjB,IAAIC,SAASC,SACvCC,cAAKC,KAAK,CAAC,CAChBC,WAAY,yCACZC,KAAM,QACMV,oBACMI,cAElBO,KAAOC,SACLN,QAAQM,SAEVC,KAAMC,sBAAaC,WAAaC,aAAa"}